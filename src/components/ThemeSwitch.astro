---
import { Icon } from "astro-icon/components";

const colors = ["red", "orange", "green", "blue"];
---

<div
  class={`group flex cursor-pointer items-center gap-2 rounded-md bg-transparent ${Astro.props.className}`}
>
  <button id="themeSwitch" class="cursor-pointer" aria-label="Toggle dark mode">
    <i
      class="flex items-center gap-1 text-sm font-medium leading-6 text-skin-base transition-transform ease-in-out group-hover/theme:rotate-45"
    >
      <Icon
        name="ri:moon-fill"
        class="hidden dark:block"
        width={25}
        height={25}
      />
      <Icon name="ri:sun-fill" class="dark:hidden" width={20} height={20} />
    </i>
  </button>

  <div class="relative inline-block">
    <!-- Display the selected circle -->
    <button
      id="dropdownButton"
      class="block h-8 w-8 rounded-full focus:outline-dashed"
    >
      <svg
        id="selectedIcon"
        class="h-full w-full"
        fill="red"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
      >
        <circle cx="12" cy="12" r="8"></circle>
      </svg>
    </button>

    <!-- The dropdown menu -->
    <div
      id="dropdownMenu"
      class="absolute top-0 hidden w-10 items-center rounded-md md:top-auto"
    >
      <ul class="flex -translate-x-32 md:inline-block md:translate-x-0">
        {
          colors.map((color) => (
            <li class="cursor-pointer" data-color={color}>
              <svg
                class="h-8 w-8"
                fill={color}
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
              >
                <circle cx="12" cy="12" r="8" />
              </svg>
            </li>
          ))
        }
      </ul>
    </div>
  </div>
</div>

<style>
  :global(.dark) {
    color-scheme: dark;
  }
</style>

<script>
  // Theme switcher (dark mode)
  const themeSwitchButton = document.getElementById("themeSwitch");

  // Color theme switcher
  const dropdownButton = document.getElementById(
    "dropdownButton",
  ) as HTMLButtonElement | null;
  const dropdownMenu = document.getElementById(
    "dropdownMenu",
  ) as HTMLDivElement | null;
  const selectedIcon = document.getElementById(
    "selectedIcon",
  ) as SVGElement | null;

  let isDark = document.documentElement.classList.contains("dark");

  // Toggle dropdown visibility
  dropdownButton?.addEventListener("click", () => {
    dropdownMenu?.classList.toggle("hidden");
  });

  // Update the selected icon when an option is clicked
  dropdownMenu?.addEventListener("click", toggleTheme);

  // Close the dropdown when clicking outside
  document.addEventListener("click", (e: MouseEvent) => {
    const target = e.target as Node;
    if (
      dropdownButton &&
      dropdownMenu &&
      !dropdownButton.contains(target) &&
      !dropdownMenu.contains(target)
    ) {
      dropdownMenu.classList.add("hidden");
    }
  });

  function toggleTheme(event: MouseEvent) {
    const target = event.target as HTMLElement;
    const selectedLi = target.closest("li"); // Find closest li element

    const { x, y, width, height } = selectedIcon?.getBoundingClientRect()!;

    const selectedIconX = x + width / 2;
    const selectedIconY = y + height / 2;

    if (selectedLi) {
      const selectedColor = selectedLi.getAttribute("data-color");

      if (selectedColor && selectedIcon) {
        startTransition(selectedIconX, selectedIconY, selectedColor);

        // Hide the dropdown
        dropdownMenu?.classList.add("hidden");
      }
    }
  }

  function toggleDark(event: MouseEvent) {
    const x = event.clientX;
    const y = event.clientY;

    startTransition(x, y);
  }

  function startTransition(x: number, y: number, selectedColor?: string) {
    const endRadius = Math.hypot(
      Math.max(x, innerWidth - x),
      Math.max(y, innerHeight - y),
    );

    const transition = document.startViewTransition(async () => {
      if (selectedColor) {
        updateDataTheme(selectedColor);
      } else {
        isDark = !isDark;
        updateTheme();
      }
    });

    transition.ready.then(() => {
      const clipPath = [
        `circle(0px at ${x}px ${y}px)`,
        `circle(${endRadius}px at ${x}px ${y}px)`,
      ];
      document.documentElement.animate(
        {
          clipPath: isDark ? [...clipPath].reverse() : clipPath,
        },
        {
          duration: 700,
          easing: "ease-out",
          pseudoElement: isDark
            ? "::view-transition-old(root)"
            : "::view-transition-new(root)",
        },
      );
    });
  }

  function updateTheme() {
    document.documentElement.classList.toggle("dark", isDark);
    localStorage.setItem("theme", isDark ? "dark" : "light");
  }

  function updateDataTheme(value: string) {
    selectedIcon?.setAttribute("fill", value);
    document.body.setAttribute("data-theme", value);
    localStorage.setItem("data-theme", value);
  }

  if (themeSwitchButton) {
    themeSwitchButton.addEventListener("click", toggleDark);
  }

  // Initialize theme based on user preference or system setting
  if (localStorage.theme !== "light") {
    isDark = true;
    updateTheme();
  }

  // Initialize data-theme based on stored value or default
  const storedDataTheme =
    localStorage.getItem("data-theme") ||
    document.body.getAttribute("data-theme")!;

  updateDataTheme(storedDataTheme);
</script>

<style is:global>
  ::view-transition-old(root),
  ::view-transition-new(root) {
    animation: none;
    mix-blend-mode: normal;
  }
  ::view-transition-old(root) {
    z-index: 1;
  }
  ::view-transition-new(root) {
    z-index: 9999;
  }
  .dark::view-transition-old(root) {
    z-index: 9999;
  }
  .dark::view-transition-new(root) {
    z-index: 1;
  }
</style>
